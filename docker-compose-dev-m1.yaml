# Due to incompatibility of flutter image with M1 processors,
# this configuration file excludes flutter container with documentation.

version: '3.9'
services:
  mongodb:
    image: mongo:5.0.0
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example    
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes: 
      - ./private/data/mongodb:/data/db
    ports:
      - "27017:27017"  
  redis:
    image: redis:6.2.4-alpine
    ports:
      - "6379:6379"
    volumes:
      - ./private/data/redis:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30
  server:
    build:
      context: server
    environment:
      GIN_MODE: debug
    ports:
      - '8081:8081'
    volumes:
      - ./server:/server
  server_docs:
    build:
      context: server/docs
    ports:
      - '8080:8080'
  swagger-ui:
    image: docker.io/swaggerapi/swagger-ui
    environment:
      - URL=http://localhost:8090/swagger.json
      - SWAGGER_JSON=/swagger.json
    ports:
      - "8090:8080"
    volumes:
      - ./docs/swagger-api-docs/swagger-api-docs.yaml:/swagger.json
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - type: bind
        source: ./server/prometheus-conf/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        read_only: true
  go-prometheus:
    build:
      context: server/prometheus-microservice
    ports:
      - "9091:9091"
    volumes:
      - ./server/prometheus-microservice:/server/prometheus
  traefik:
    image: traefik
    ports:
      - target: 80
        published: 80
        protocol: "tcp"
        mode: "host"
      - target: 9092
        published: 9092
        protocol: "tcp"
        mode: "host"
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /varun/run/docker.sock
        read_only: true